function exportJsonToFile() {
  const ss = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = ss.getSheetByName("Data"); 
  if (!sheet) {
    throw new Error("指定されたシート名が存在しません。シート名を確認してください。");
  }

  const rows = sheet.getDataRange().getValues();
  const headers = rows.shift();

  // 各行を JSON オブジェクトに変換
  const dataArray = rows.map(row => {
    let obj = {};
    headers.forEach((header, i) => {
      setNestedValue(obj, header, row[i]);
    });
    return obj;
  });

  // ★ ここで固定情報を追加したオブジェクトを作る
  const result = {
    Name: "Address",  // 固定
    Version: "1.0",   // 固定
    Data: dataArray   // シートから作った配列
  };

  // JSON に変換
  const json = JSON.stringify(result, null, 2);

  // 保存先フォルダ
  const folderId = "フォルダID"; // ←置き換え
  const folder = DriveApp.getFolderById(folderId);

  // ファイル名
  const fileName = "export.json";

  // JSON をファイルに保存
  const blob = Utilities.newBlob(json, "application/json", fileName);
  folder.createFile(blob);

  Logger.log("JSON を書き出しました: " + fileName);
}

function setNestedValue(obj, key, value) {
  if (!key) return;
  const keys = key.split(".");
  let current = obj;

  keys.forEach((k, idx) => {
    const isLast = idx === keys.length - 1;
    const isArrayIndex = !isNaN(k); // "0", "1", ... のように数値なら配列とみなす

    if (isLast) {
      // 最後のキーに値を代入する
      if (isArrayIndex) {
        // 配列のインデックス
        const index = parseInt(k, 10);
        if (!Array.isArray(current)) {
          // current がまだ配列でなければ配列にする
          current = [];
        }
        current[index] = value;
      } else {
        // 通常のオブジェクトのキー
        current[k] = value;
      }
    } else {
      // 途中のキーならオブジェクト/配列を掘り下げる
      const nextKey = keys[idx + 1];
      const nextIsArray = !isNaN(nextKey);

      if (isArrayIndex) {
        // 今のキーが配列インデックスの場合
        const index = parseInt(k, 10);
        if (!Array.isArray(current)) {
          current = [];
        }
        if (!current[index]) {
          current[index] = nextIsArray ? [] : {};
        }
        current = current[index];
      } else {
        // オブジェクトのキー
        if (!current[k]) {
          current[k] = nextIsArray ? [] : {};
        }
        current = current[k];
      }
    }
  });
}
